; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "joyride" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Using host:port localhost:42917 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user-activate꞉>  ; Use `alt+enter` to evaluate
clj꞉user-activate꞉> 
; Creating cljs repl session...
; Connecting cljs repl: joyride...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.cljs'
nil
cljs꞉user-activate꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
cljs꞉user-activate꞉> 
2
clj꞉clojure-ddd.chap1꞉> 
5
clj꞉clojure-ddd.chap1꞉> 
-5
clj꞉clojure-ddd.chap1꞉> 
3.14
clj꞉clojure-ddd.chap1꞉> 
; fa.call is not a function
clj꞉clojure-ddd.chap1꞉> 
true
clj꞉clojure-ddd.chap1꞉> 
true
clj꞉clojure-ddd.chap1꞉> 
false
clj꞉clojure-ddd.chap1꞉> 
; [line 1, col 6] Unsupported character: x01b.
clj꞉clojure-ddd.chap1꞉> 
; [line 1, col 5] Unsupported character: x1b.
clj꞉clojure-ddd.chap1꞉> 
"r"
clj꞉clojure-ddd.chap1꞉> 
#object[Jf]
clj꞉clojure-ddd.chap1꞉> 
#object[If]
clj꞉clojure-ddd.chap1꞉> 
"Rory"
clj꞉clojure-ddd.chap1꞉> 
hello'
clj꞉clojure-ddd.chap1꞉> 
:good
clj꞉clojure-ddd.chap1꞉> 
nil
clj꞉clojure-ddd.chap1꞉> 
#'clojure-ddd.chap1/wife
clj꞉clojure-ddd.chap1꞉> 
"Penny"
clj꞉clojure-ddd.chap1꞉> 
(1 2)
clj꞉clojure-ddd.chap1꞉> 
(1 2)
clj꞉clojure-ddd.chap1꞉> 
#'clojure-ddd.chap1/my-list
clj꞉clojure-ddd.chap1꞉> 
(1 2)
clj꞉clojure-ddd.chap1꞉> 
