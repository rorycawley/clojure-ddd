; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "joyride" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Using host:port localhost:35377 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user-activate꞉>  ; Use `alt+enter` to evaluate
clj꞉user-activate꞉> 
; Creating cljs repl session...
; Connecting cljs repl: joyride...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.cljs'
nil
cljs꞉user-activate꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
cljs꞉user-activate꞉> 
1
clj꞉chap1꞉> 
:free_wifi
clj꞉chap1꞉> 
#'chap1/map1
clj꞉chap1꞉> 
"one"
clj꞉chap1꞉> 
"one"
clj꞉chap1꞉> 
{"string-key" #object[If]}
clj꞉chap1꞉> 
{:age 30, :name "Rory"}
clj꞉chap1꞉> 
; Wrong number of args (3) passed to: :rory
clj꞉chap1꞉> 
{:rory "50", :penny 49}
clj꞉chap1꞉> 
; Could not resolve symbol: foo1
clj꞉chap1꞉> 
#'chap1/foo1
clj꞉chap1꞉> 
"50"
clj꞉chap1꞉> 
30
clj꞉chap1꞉> 
{:age 30, :name "Rory"}
clj꞉chap1꞉> 
:a
clj꞉chap1꞉> 
:34
clj꞉chap1꞉> 
:_?
clj꞉chap1꞉> 
1
clj꞉chap1꞉> 
1
clj꞉chap1꞉> 
"unicorns?"
clj꞉chap1꞉> 
"Cannot find it"
clj꞉chap1꞉> 
2
clj꞉chap1꞉> 
2
clj꞉chap1꞉> 
{:foo "bar"}
clj꞉chap1꞉> 
[1 2 3]
clj꞉chap1꞉> 
[1 2 3 4]
clj꞉chap1꞉> 
(1 2 3)
clj꞉chap1꞉> 
2
clj꞉chap1꞉> 
(1 2 3)
clj꞉chap1꞉> 
("hello" :bar 3)
clj꞉chap1꞉> 
#{1 2 3}
clj꞉chap1꞉> 
#{"hello" :bar 3}
clj꞉chap1꞉> 
#{1 2 3}
clj꞉chap1꞉> 
#{1 2 3 4}
clj꞉chap1꞉> 
2
clj꞉chap1꞉> 
#{1 2 3}
clj꞉chap1꞉> 
#{:a :b}
clj꞉chap1꞉> 
#{[:a 1] [:b 2]}
clj꞉chap1꞉> 
#{1 2 3}
clj꞉chap1꞉> 
#{1 2}
clj꞉chap1꞉> 
true
clj꞉chap1꞉> 
:a
clj꞉chap1꞉> 
true
clj꞉chap1꞉> 
false
clj꞉chap1꞉> 
:not-found
clj꞉chap1꞉> 
:a
clj꞉chap1꞉> 
nil
clj꞉chap1꞉> 
:a
clj꞉chap1꞉> 
nil
clj꞉chap1꞉> 
"not found"
clj꞉chap1꞉> 
nil
clj꞉chap1꞉> 
